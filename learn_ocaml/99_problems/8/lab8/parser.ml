type token =
  | INT of (int)
  | FLOAT of (float)
  | LOC of (string)
  | TRUE
  | FALSE
  | SEQ
  | SKIP
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | DONE
  | FOR
  | LTE
  | EQ
  | ASGNOP
  | DEREF
  | PLUS
  | MINUS
  | MUL
  | DIV
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

open ImpAST
open Lexing

let location () =  let start_pos = Parsing.symbol_start_pos () in
    let end_pos = Parsing.symbol_end_pos () in
    Printf.sprintf "%s:%d.%d-%d.%d"
      start_pos.pos_fname
      start_pos.pos_lnum (start_pos.pos_cnum - start_pos.pos_bol)
      end_pos.pos_lnum (end_pos.pos_cnum - end_pos.pos_bol)

let parseError loc = raise (Lexer.ParseError loc)

# 45 "parser.ml"
let yytransl_const = [|
  260 (* TRUE *);
  261 (* FALSE *);
  262 (* SEQ *);
  263 (* SKIP *);
  264 (* IF *);
  265 (* THEN *);
  266 (* ELSE *);
  267 (* WHILE *);
  268 (* DO *);
  269 (* DONE *);
  270 (* FOR *);
  271 (* LTE *);
  272 (* EQ *);
  273 (* ASGNOP *);
  274 (* DEREF *);
  275 (* PLUS *);
  276 (* MINUS *);
  277 (* MUL *);
  278 (* DIV *);
  279 (* LPAREN *);
  280 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* LOC *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\002\000\003\000\003\000\003\000\003\000\
\006\000\005\000\009\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\020\000\002\000\003\000\000\000\004\000\005\000\
\006\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\
\010\000\011\000\000\000\000\000\000\000\000\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\015\000\016\000"

let yysindex = "\255\255\
\068\255\000\000\000\000\000\000\000\000\249\254\000\000\000\000\
\000\000\068\255\068\255\244\254\010\255\068\255\000\000\077\000\
\068\255\091\255\102\255\068\255\000\000\036\255\068\255\068\255\
\068\255\068\255\068\255\068\255\068\255\000\000\239\254\068\255\
\068\255\129\255\000\000\140\255\239\254\239\254\241\254\241\254\
\000\000\000\000\110\255\121\255\068\255\068\255\000\000\148\255\
\156\255\068\255\074\255\068\255\156\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
\000\000\000\000\000\000\067\000\041\000\046\000\001\000\017\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\000\000\000\000\000\000\062\000"

let yygindex = "\000\000\
\000\000\254\255"

let yytablesize = 355
let yytable = "\001\000\
\008\000\026\000\027\000\028\000\029\000\028\000\029\000\018\000\
\019\000\017\000\020\000\022\000\021\000\000\000\031\000\000\000\
\009\000\034\000\000\000\000\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\000\000\000\000\043\000\044\000\000\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\023\000\048\000\049\000\000\000\015\000\000\000\051\000\
\000\000\053\000\024\000\025\000\000\000\017\000\026\000\027\000\
\028\000\029\000\000\000\035\000\000\000\019\000\000\000\000\000\
\000\000\000\000\016\000\003\000\004\000\005\000\006\000\007\000\
\008\000\000\000\009\000\010\000\030\000\000\000\011\000\023\000\
\000\000\012\000\000\000\000\000\000\000\013\000\000\000\000\000\
\024\000\025\000\014\000\000\000\026\000\027\000\028\000\029\000\
\023\000\052\000\000\000\032\000\000\000\000\000\000\000\000\000\
\000\000\024\000\025\000\023\000\000\000\026\000\027\000\028\000\
\029\000\033\000\000\000\023\000\024\000\025\000\000\000\046\000\
\026\000\027\000\028\000\029\000\024\000\025\000\023\000\000\000\
\026\000\027\000\028\000\029\000\000\000\047\000\045\000\024\000\
\025\000\000\000\000\000\026\000\027\000\028\000\029\000\024\000\
\025\000\023\000\000\000\026\000\027\000\028\000\029\000\000\000\
\000\000\050\000\024\000\025\000\000\000\000\000\026\000\027\000\
\028\000\029\000\024\000\025\000\000\000\000\000\026\000\027\000\
\028\000\029\000\024\000\025\000\000\000\000\000\026\000\027\000\
\028\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\000\000\008\000\008\000\000\000\008\000\008\000\000\000\008\000\
\008\000\000\000\000\000\008\000\008\000\000\000\009\000\000\000\
\008\000\009\000\009\000\000\000\009\000\009\000\000\000\009\000\
\009\000\000\000\000\000\009\000\009\000\000\000\013\000\000\000\
\009\000\013\000\013\000\000\000\013\000\013\000\014\000\013\000\
\013\000\014\000\014\000\015\000\014\000\014\000\015\000\015\000\
\013\000\015\000\015\000\017\000\000\000\000\000\017\000\017\000\
\014\000\017\000\017\000\019\000\000\000\015\000\019\000\019\000\
\000\000\019\000\019\000\016\000\016\000\017\000\016\000\016\000\
\000\000\000\000\023\000\000\000\000\000\019\000\000\000\000\000\
\000\000\000\000\016\000\024\000\025\000\000\000\000\000\026\000\
\027\000\028\000\029\000"

let yycheck = "\001\000\
\000\000\019\001\020\001\021\001\022\001\021\001\022\001\010\000\
\011\000\017\001\023\001\014\000\003\001\255\255\017\000\255\255\
\000\000\020\000\255\255\255\255\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\255\255\255\255\032\000\033\000\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\006\001\045\000\046\000\255\255\000\000\255\255\050\000\
\255\255\052\000\015\001\016\001\255\255\000\000\019\001\020\001\
\021\001\022\001\255\255\024\001\255\255\000\000\255\255\255\255\
\255\255\255\255\000\000\000\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\000\000\255\255\011\001\006\001\
\255\255\014\001\255\255\255\255\255\255\018\001\255\255\255\255\
\015\001\016\001\023\001\255\255\019\001\020\001\021\001\022\001\
\006\001\024\001\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\015\001\016\001\006\001\255\255\019\001\020\001\021\001\
\022\001\012\001\255\255\006\001\015\001\016\001\255\255\010\001\
\019\001\020\001\021\001\022\001\015\001\016\001\006\001\255\255\
\019\001\020\001\021\001\022\001\255\255\013\001\006\001\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\015\001\
\016\001\006\001\255\255\019\001\020\001\021\001\022\001\255\255\
\255\255\006\001\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\006\001\255\255\
\255\255\009\001\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\255\255\006\001\255\255\
\024\001\009\001\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\255\255\006\001\255\255\
\024\001\009\001\010\001\255\255\012\001\013\001\006\001\015\001\
\016\001\009\001\010\001\006\001\012\001\013\001\009\001\010\001\
\024\001\012\001\013\001\006\001\255\255\255\255\009\001\010\001\
\024\001\012\001\013\001\006\001\255\255\024\001\009\001\010\001\
\255\255\012\001\013\001\009\001\010\001\024\001\012\001\013\001\
\255\255\255\255\006\001\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\024\001\015\001\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  SEQ\000\
  SKIP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  DONE\000\
  FOR\000\
  LTE\000\
  EQ\000\
  ASGNOP\000\
  DEREF\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  LOC\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
                            ( _1 )
# 253 "parser.ml"
               : ImpAST.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 44 "parser.mly"
                               ( Int (_1,location()) )
# 260 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 45 "parser.mly"
                               ( Float (_1, location()) )
# 267 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                               ( Bool (true, location()) )
# 273 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                               ( Bool (false, location()) )
# 279 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
                               ( Skip (location()) )
# 285 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                               ( _2 )
# 292 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                               ( Op (_1,Plus,_3, location()) )
# 300 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                                ( Op (_1,Minus,_3, location()) )
# 308 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                              ( Op (_1,Mul,_3, location()) )
# 316 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                              ( Op (_1,Div,_3, location()) )
# 324 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                               ( Loc (_2, location()) )
# 331 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                               ( Atrib (_1,_3, location()) )
# 339 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                               ( Op (_1, Mic, _3, location()) )
# 347 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                              ( Op (_1, Egal, _3, location()) )
# 355 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                               ( Secv (_1,_3, location()) )
# 363 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                               ( If (_2, _4, _6, location()) )
# 372 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                               ( While (_2, _4, location()) )
# 380 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                               ( For (_3, _5, _7, _9, location()) )
# 390 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                               ( parseError (location ()) )
# 396 "parser.ml"
               : 'expr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : ImpAST.expr)
