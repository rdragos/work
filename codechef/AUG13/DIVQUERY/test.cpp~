#include <cstdio>
#include <algorithm>
#include <fstream>
#include <iostream>
#include <vector>
#include <queue>
#include <map>
#include <cstring>
#include <string>
#include <set>
#include <stack>
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define ll long long


const int MAXN = 100003;

using namespace std;


vector <int> divisors[MAXN];
int A[MAXN];

inline bool check(int K) {
    return divisors[K].size() == 0;
}
inline int lower_search(int K, int X) {
    
    int i = divisors[K].size();

    for (int lg = 1 << 17; lg > 0; lg >>= 1) {
        if (i - lg >= 0 && divisors[K][i - lg] >= X) {
            i -= lg;
        }
    }
    return i;
}
inline int upper_search(int K, int Y) {
    int i = 0;
    int n = divisors[K].size();
    
    for (int lg = 1 << 17; lg > 0; lg >>= 1) {
        if (i + lg < n && divisors[K][i + lg] <= Y)
            i += lg;
    }
    return i;
}
int main() {
//    ifstream cin("test.in");
//    ofstream cout("test.out");
    
    int N, Q;

    cin >> N >> Q;
    
    
    for (int i = 1; i <= N; ++i) {
        cin >> A[i];
        for (int k = 2; k * k <= A[i]; ++k) {
            if (A[i] % k == 0) {
                divisors[k].push_back(i);
                if (k * k != A[i]) {
                    divisors[A[i] / k].push_back(i);
                }
            }
        }
        if (A[i] != 1)
            divisors[A[i]].push_back(i);
    }
     
    for (int i = 1; i < MAXN; ++i) {
        if (divisors[i].size() == 0)
            continue;
        divisors[i].resize(divisors[i].size());
    }
    
    for (int i = 1; i <= Q; ++i) {
        int x, y, k, X, Y;
        cin >> x >> y >> k;
        
        if (check(k)) {
            cout << 0 << "\n";
            continue;
        }

        X = lower_search(k,x);
        Y = upper_search(k,y);
        cerr << X << " " << Y << "\n";
        cout << Y - X + 1 << "\n";
    }

    
    return 0;
}
