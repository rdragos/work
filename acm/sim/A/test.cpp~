#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <sstream>
#include <algorithm>
#include <functional>
#include <cstdio>
#include <ctime>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <unordered_map>
#define pii pair<int,int>
#define x first
#define y second
#define mp make_pair
#define REP(i,n) for(int i = 0;i < (int)n;i++)
#define i64 long long

using namespace std;

const int DIM2 = 8192;
const string rr[2] = {"NO","YES"};
const int nmax = 2505;
int n, m;
char A[nmax][nmax];
int S[2][nmax][nmax];
int Q;

char vec[DIM2];
int poz;
void cit(int &x)   
{   
  x=0;   
  while(vec[poz]<'0' || vec[poz]>'9')   
       if(++poz==DIM2) fread(vec,1,DIM2,stdin),poz=0;   
   
    while(vec[poz]>='0' && vec[poz]<='9')   
    {   
        x=x*10+vec[poz]-'0';   
        if(++poz==DIM2) fread(vec, 1, DIM2, stdin),poz=0;   
    }  
}   
void readData() {
	cin>>n>>m;	
	REP(i,n) {
        cin.getline(A[i],nmax);
		//cout<<A[i]<<"\n";
	}
}

inline int query(int r1,int c1,int r2,int c2) {
	if(r1 == r2) {
		if(c1 > c2) swap(c1,c2);
		return S[0][r1][c2] - S[0][r1][c1 - 1];
	}
	if(r1 > r2) swap(r1,r2);
	return S[1][r2][c1] - S[1][r1 - 1][c1];
	
}

void solve() {
	REP(i,n) {
		REP(j,m) {
			bool wall = (A[i][j] == '#');
			S[0][i + 1][j + 1] = S[0][i + 1][j] + wall;
			S[1][i + 1][j + 1] = S[1][i ][j + 1] + wall;
		}
	}
    
    cit(Q);
//	cin>>Q;
	//cout<<Q<<"\n";
	int r1, c1, r2, c2;
	for(;Q;Q--) {
//		cin>>r1>>c1>>r2>>c2;
		cout<<r1<<" "<<c1<<"\n";
		cit(r1); cit(c1); cit(r2); cit(c2);
        if(r1 > r2) {
			swap(r1,r2);
			swap(c1,c2);
		}
		if(r1 == r2) {
			cout<<rr[query(r1,c1,r2,c2) == 0];
		}
		else
		if(c1 == c2) {
			cout<<rr[query(r1,c1,r2,c2) == 0];
		} else {
			
				cout<<rr[( ( (query(r1,c1,r1,c2) == 0 && query(r2,c2,r1,c2) == 0)) || (query(r1,c1,r2,c1) == 0 && query(r2,c2,r2,c1) == 0) ) ];
			
		}
		cout<<"\n";
	}
}
		
int main()
{
	freopen("test.in","r",stdin); freopen("test.out","w",stdout);
    //cin.sync_with_stdio(false), cout.sync_with_stdio(false);
	readData();
	solve();
	return 0;
}
